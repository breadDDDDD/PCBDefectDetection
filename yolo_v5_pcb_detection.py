# -*- coding: utf-8 -*-
"""YOLO V5 PCB Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gHCjLSPxwkpihuaUQiZEDw5qCt9wa2Cn
"""

print("hellow world")

"""# Step by step guide on using Yolov5 to detect defects on PCB
### For suggestion, use Google Colaboratory or Kaggle notebook to run this.
Reason : to speed up the training process due to the quite high computational cost needed to run YoloV5 and pretty much any computer vision model.

The model being used is YoloV5 which will be pulled from a github repository and the data being used is from this this repository : which was modified to be able to use in YoloV5.

In this notebook, all data is being kept inside a google drive folder and all process will be sent inside the google drive folder.

This notebook was created inside google colaboratory, change accordingly for Kaggle notebooks.

<br>Steps
1. Insert the zip file named yoloData.zip into a google drive folder
2. Change runtime type by using GPU/TPU accelaration
3. Follow each steps inside this notebook
4. All images/output will be saved inside the google drive folder
5. Best weights will also be saved inside a folder

# Install dependencies
"""

import os
from random import choice
import shutil
import glob
from PIL import Image
from urllib.parse import quote
os.environ["WANDB_MODE"] = "disabled"

# Commented out IPython magic to ensure Python compatibility.
#clones the Yolov5 model from github
!git clone https://github.com/ultralytics/yolov5.git
# %cd yolov5
!pip install -r requirements.txt

"""# Mounting Google Drive
Change the directory below to your folder where the data is being kept.
"""

from google.colab import drive
drive.mount('/content/drive')

#create the main folder
folder_path = '/content/drive/MyDrive/yolodatasetprocessed'
os.makedirs(folder_path, exist_ok=True)

yoloData_folder = os.path.join(folder_path, "yoloData")
os.makedirs(yoloData_folder, exist_ok=True)

#unzip the data with this inside a folder called yoloData
!unzip /content/drive/MyDrive/yoloData.zip -d /content/drive/MyDrive/yolodatasetprocessed/yoloData

#this creates the .yaml file needed to run the model and insert it inside the model

data_dir = "/content/drive/MyDrive/yolodatasetprocessed/yoloData"
yolo_dir="/content/yolov5"

all_data_yaml = f"""
path: {data_dir}
train: images/train
val: images/val

names:
    0: missing_hole
    1: mouse_bite
    2: open_circuit
    3: short
    4: spur
    5: spurious_copper
"""

data_path = os.path.join(yolo_dir, 'data.yaml')

with open(data_path, 'w') as f:
    f.write(all_data_yaml)

#trains the model based on the following Hyperparameters

#change name according to each version of the run
!python train.py --img 416 --batch 16 --epochs 275 --data data.yaml --weights yolov5s.pt --cache --name pcb_3rd

#evaluates the result of validation based on the best weights

#change the run location to fit the current run directory

!python val.py --weights runs/train/pcb_3rd4/weights/best.pt  --data data.yaml

"""# Results
The confusion matrix, PR Curve, and other such results created will be saved inside a folder in google drive and in an array.

To display it within the notebook, just change the { arr[number] }
"""

#saves the output into the folder inside gdrive and an array


#change the folder_path {pcb_3rd4} into the run name
folder_path = os.path.join(yolo_dir, "runs", "train", "pcb_3rd4")
os.makedirs(folder_path, exist_ok=True)

outpng_path =os.path.join(data_dir, "outputpng")
os.makedirs(outpng_path, exist_ok=True)

outjpg_path =os.path.join(data_dir, "outputjpg")
os.makedirs(outjpg_path, exist_ok=True)

png_files = glob.glob(os.path.join(folder_path, "*.png"))
jpg_files = glob.glob(os.path.join(folder_path, "*.jpg"))

jpg_arr=[]
png_arr=[]

for file_path in png_files:
    png_arr.append(file_path)
    output_file_path = os.path.join(outpng_path, os.path.basename(file_path))
    Image.open(file_path).save(output_file_path)

for file_path in jpg_files:
    jpg_arr.append(file_path)
    output_file_path = os.path.join(outjpg_path, os.path.basename(file_path))
    Image.open(file_path).save(output_file_path)

print(len(png_arr))
print(len(jpg_arr))

Image.open(png_arr[0])

Image.open(png_arr[1])

Image.open(png_arr[2])

Image.open(png_arr[3])

Image.open(png_arr[4])

Image.open(png_arr[5])

Image.open(jpg_arr[0])

"""# Training and val error

"""

#adding the run into a dataframe
import pandas as pd
import matplotlib.pyplot as plt

#change {pcb_3rd4} into the run name
results = pd.read_csv("/content/yolov5/runs/train/pcb_3rd4/results.csv")
results_df = pd.DataFrame(results)
results_df.head()

#showcasing the runs training error and validation error
epochs = results_df.iloc[:,0]
train_box_loss = results_df.iloc[:,1]
val_box_loss = results_df.iloc[:,8]
train_cls_loss = results_df.iloc[:,3]
val_cls_loss = results_df.iloc[:,10]

fig, axs = plt.subplots(1, 2, figsize=(18, 6))

# Plot box loss
axs[0].plot(epochs, train_box_loss, label='Train Box Loss', color='blue')
axs[0].plot(epochs, val_box_loss, label='Validation Box Loss', color='orange')
axs[0].set_title('Box Loss')
axs[0].set_xlabel('Epoch')
axs[0].set_ylabel('Loss')
axs[0].legend()
axs[0].grid(True)

# Plot cls loss
axs[1].plot(epochs, train_cls_loss, label='Train Cls Loss', color='blue')
axs[1].plot(epochs, val_cls_loss, label='Validation Cls Loss', color='orange')
axs[1].set_title('Class Loss')
axs[1].set_xlabel('Epoch')
axs[1].set_ylabel('Loss')
axs[1].legend()
axs[1].grid(True)


plt.tight_layout()
plt.show()

"""# Save the weights

the run best weights will be saved into the drive for further use
"""

#save the weights of the run for future uses
save_path = os.path.join(data_dir, "saved_weights")
weight_path = os.path.join(folder_path, "weights", "best.pt")

os.makedirs(os.path.dirname(save_path), exist_ok=True)
shutil.copy(weight_path, save_path)